import re
import requests

def handle_get_request(accion, solicitud, email, user):
    if not user:
        return {"solicitud": "GET", "result": {"error": "Â¡Ã“rale! No te encontrÃ© en la base, Â¿seguro que estÃ¡s registrado?"}}, 404

    onedrive_integration = user.get('integrations', {}).get('onedrive', None)  # CambiÃ© 'OneDrive' a 'onedrive' para consistencia
    if not onedrive_integration or not onedrive_integration.get('token'):
        return {"solicitud": "GET", "result": {"error": "Â¡Ey! No tengo tu token de OneDrive, Â¿me das permisos otra vez?"}}, 400
    onedrive_token = onedrive_integration.get('token')

    if not accion:
        return {"solicitud": "GET", "result": {"error": "Â¡QuÃ© pasa, compa! No me dijiste quÃ© hacer, Â¿quÃ© busco?"}}, 400
    if not solicitud:
        return {"solicitud": "GET", "result": {"error": f"Â¡Falta algo, papu! Necesito mÃ¡s detalles para buscar, Â¿quÃ© quieres ver?"}}, 400

    solicitud = solicitud.lower()

    try:
        if accion == "buscar":
            # Limpiar la solicitud para obtener el nombre de la carpeta o tÃ©rmino de bÃºsqueda
            query_clean = solicitud.split("en")[-1].strip() if "en" in solicitud else solicitud.split("de")[-1].strip()

            # Buscar la carpeta directamente por nombre
            folder_url = f"https://graph.microsoft.com/v1.0/me/drive/root:/{query_clean}"
            headers = {
                'Authorization': f"Bearer {onedrive_token}",
                'Accept': 'application/json'
            }

            folder_response = requests.get(folder_url, headers=headers)
            if folder_response.status_code == 404:
                return {"solicitud": "GET", "result": {"message": f"ðŸ“‚ No encontrÃ© la carpeta '{query_clean}' en OneDrive."}}, 200

            folder_response.raise_for_status()
            folder_data = folder_response.json()
            folder_id = folder_data.get("id")

            if not folder_id:
                return {"solicitud": "GET", "result": {"error": "No se pudo obtener el ID de la carpeta"}}, 500

            # Buscar archivos dentro de la carpeta
            files_url = f"https://graph.microsoft.com/v1.0/me/drive/items/{folder_id}/children"
            files_response = requests.get(files_url, headers=headers)

            if files_response.status_code != 200:
                return {"solicitud": "GET", "result": {"error": "Error al obtener archivos de la carpeta"}}, files_response.status_code

            files = files_response.json().get('value', [])

            if not files:
                return {"solicitud": "GET", "result": {"message": f"ðŸ“‚ No se encontraron archivos en la carpeta '{query_clean}'."}}, 200

            # Procesar resultados
            search_results = [
                {
                    "name": file.get('name', 'Sin nombre'),
                    "type": file.get('file', {}).get('mimeType', 'Desconocido'),
                    "url": file.get('@microsoft.graph.downloadUrl', None),
                    "id": file.get('id')  # AÃ±adÃ­ el ID para posibles acciones futuras
                } for file in files
            ]

            return {"solicitud": "GET", "result": {"message": f"Â¡Ã“rale, papu! EncontrÃ© {len(search_results)} archivos en '{query_clean}' ðŸ“„", "data": search_results}}, 200

        else:
            return {"solicitud": "GET", "result": {"error": f"Â¡No entendÃ­ quÃ© quieres con '{accion}'! Usa 'buscar', Â¿va?"}}, 400

    except requests.RequestException as e:
        return {"solicitud": "GET", "result": {"error": f"Â¡Ay, quÃ© mala onda! FallÃ³ la conexiÃ³n con OneDrive: {str(e)}"}}, 500
    except Exception as e:
        return {"solicitud": "GET", "result": {"error": f"Â¡Uy, se puso feo! Error inesperado: {str(e)}"}}, 500